# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - deploy
  - run

variables:
  DESTINATION_PATH: "$HOMEDIR/$CI_PROJECT_NAME/glcicd/$ENVIRONMENT"
  LOG_PATH: "$HOMEDIR/logs_private/$CI_PROJECT_NAME/$ENVIRONMENT"
  ENVIRONMENT: "benchmark" # can be set as pipeline variable
  HOMEDIR: "~" # default homedir works in most cases but sometimes it needs to be explicitely evaluated

before_script:
  - echo "path $DESTINATION_PATH"
  - mkdir -p ~/.ssh
  - echo $SSH_KEY | base64 --decode > ~/.ssh/id_rsa # must decode base64 as key is stored as base64 in gitlab var
  - chmod 600 ~/.ssh/id_rsa

create environment directory:
  stage: deploy
  environment:
    name: $ENVIRONMENT 
  variables:
    PATHS: "$DESTINATION_PATH+++$LOG_PATH"
    HOMEDIR: "$(eval echo \"~$USER\")" # ~ cannot be expanded in this command therefore we need to evaluate it
  script:
    - echo "cre env"
    - |
      ssh -o StrictHostKeyChecking=no -T -i ~/.ssh/id_rsa "${USER_ON_HOST}" "sh -c '
      for path in \$(echo \"$PATHS\" | tr \"+++\" \"\n\"); do
        echo \"\$path\" && mkdir -p \$path; done
      '"

log deployment start:
  stage: deploy
  environment:
    name: $ENVIRONMENT
  when: on_success
  needs:
    - job: create environment directory
  script:
    - |
      ssh -o StrictHostKeyChecking=no -T -i ~/.ssh/id_rsa "${USER_ON_HOST}" "sh -c '
      echo \"$(date +'%Y-%m-%d_%T'): Deployment to $DESTINATION_PATH started.\" >> $LOG_PATH/deployment'"

transfer env vars to remote:
  stage: deploy  
  environment:
    name: $ENVIRONMENT
  when: on_success
  needs:
    - job: create environment directory
  script:
    - echo "trans env"
    -  |
      echo "export PORT=$(echo $PORT | base64 --decode)" >> ~/env
      scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ~/env "${USER_ON_HOST}":"$DESTINATION_PATH/env.var"

log env transfer:
  stage: deploy
  environment:
    name: $ENVIRONMENT
  when: on_success
  needs:
    - job: transfer env vars to remote
  script:
    - |
      ssh -o StrictHostKeyChecking=no -T -i ~/.ssh/id_rsa "${USER_ON_HOST}" "sh -c '
      echo \"$(date +'%Y-%m-%d_%T'): Environment variables have been set.\" >> $LOG_PATH/deployment'"


copy app to remote:
  stage: deploy
  when: on_success
  needs:
    - job: create environment directory
  script:
    - scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa * "${USER_ON_HOST}":"$DESTINATION_PATH"

log deployment successful:
  stage: deploy
  environment:
    name: $ENVIRONMENT
  when: on_success
  needs:
    - job: copy app to remote
  script:
    |
    ssh -o StrictHostKeyChecking=no -T -i ~/.ssh/id_rsa "${USER_ON_HOST}" "sh -c '
    echo \"$(date +'%Y-%m-%d_%T'): Deployment to $DESTINATION_PATH was successful.\" >> $LOG_PATH/deployment
    echo \"===\" >> $LOG_PATH/deployment'"

run app:
  stage: deploy
  when: manual
  script:
    - echo "path $DESTINATION_PATH"
